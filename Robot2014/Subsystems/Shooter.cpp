// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	loadingMotor = RobotMap::shooterLoadingMotor;
	latch = RobotMap::shooterLatch;
	latchingLimitSwitch = RobotMap::shooterLatchingLimitSwitch;
	cockedLimitSwitch = RobotMap::shooterCockedLimitSwitch;
	tooFarLimitSwitch = RobotMap::shooterTooFarLimitSwitch;
	backLimitSwitch = RobotMap::shooterBackLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shooter::CheckShooterLimits()
{
	// sets the motor to zero if motor is trying to drive into the extremes of the mechanism
}
void Shooter::SetLoadingMotor(float power)
{
	
	
	if(latchingLimitSwitch->Get() == true && loadingMotor->Get() > 0)
	{
		loadingMotor->Set(0);
		
	}
	else if(backLimitSwitch->Get() == true && loadingMotor->Get() < 0)
	{
		loadingMotor->Set(0);
		printf("Back Limit Switch is TRUE! \r\n");
	}
	else
	{
		loadingMotor->Set(power);
	}
}

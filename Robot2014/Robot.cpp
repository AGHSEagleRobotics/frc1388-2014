// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Math.h"
#include "GitVersion.h"
#include "InsightLT/InsightLT.h"
#include "InsightLT/Line.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Claw* Robot::claw = 0;
DriveTrain* Robot::driveTrain = 0;
Shooter* Robot::shooter = 0;
Feeder* Robot::feeder = 0;
Tusks* Robot::tusks = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Robot::Robot():
	display(insight::FOUR_ZONES),
	disp_GitVersion(""),
	disp_BuildDate("Built On:"),
	disp_BattVoltage("Batt:")
{
	
}
void Robot::GlobalInit()
{
	display.registerData(disp_GitVersion, 1);
	display.registerData(disp_BuildDate, 2);
	display.startDisplay();
	disp_GitVersion.setData(GIT_VERSION);
	disp_BuildDate.setData(BUILD_DATE);
}
void Robot::GlobalPeriodic()
{
	battVoltage = DriverStation::GetInstance()->GetBatteryVoltage();
	
	if(initTimer.HasPeriodPassed(5.0) == true)
	{
		display.registerData(disp_BattVoltage, 3);
		disp_BattVoltage.setData(battVoltage);
	}	
	SmartDashboard::PutNumber("Current Arm Angle: ", RobotMap::clawQuadClawEncoder->GetDistance());
	SmartDashboard::PutNumber("Custom Angle: ", Robot::claw->savePosition);
	SmartDashboard::PutBoolean("Shooter is Cocked: ", RobotMap::shooterCockedLimitSwitch->Get());
	claw->CheckLimits();
	shooter->CheckShooterLimits();
}
void Robot::RobotInit() {
	RobotMap::init();
	GlobalInit();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	claw = new Claw();
	driveTrain = new DriveTrain();
	shooter = new Shooter();
	feeder = new Feeder();
	tusks = new Tusks();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousGroup();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	
	// Print version information		
	string gitVersion = GIT_VERSION;		
	if (strlen(GIT_TAG)) {		
		gitVersion += " (";		
		gitVersion += GIT_TAG;
		gitVersion += ")";
	}
		
	// Display on NetConsole:		
	
	printf("\nSW version: %s\n", gitVersion.c_str());
	printf("Built on %s %s\n\n", BUILD_DATE, BUILD_TIME);\
	
	// Display on SmartDashboard:		
	SmartDashboard::PutString("Software Version: ", gitVersion);
	
	initTimer.Start();	
}
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	GlobalPeriodic();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	GlobalPeriodic();
	//this code makes the robot run checklimits whenever the robot is on
}
void Robot::TestPeriodic() {
	GlobalPeriodic();
	lw->Run();
}
void Robot::DisabledInit()
{
	
}
void Robot::DisabledPeriodic()
{
	GlobalPeriodic();
}
float Robot::SignOf(float number)
{
	if(number < 0)
	{
		return -1.0;
	}
	return 1.0;
}
float Robot::JoystickDeadband(float value)
{
	if(fabs(value) < 0.1)
	{
		value = 0;
	}
	
	return value;
}
START_ROBOT_CLASS(Robot);

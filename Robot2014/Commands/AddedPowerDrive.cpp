// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "AddedPowerDrive.h"
AddedPowerDrive::AddedPowerDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void AddedPowerDrive::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void AddedPowerDrive::Execute() {
	
	float leftEncoderRate = Robot::driveTrain->leftEncoder->GetRate();
	float rightEncoderRate = Robot::driveTrain->rightEncoder->GetRate();
	
	float leftPower = Robot::oi->getRightYAxis();
	float rightPower = -(Robot::oi->getLeftYAxis());
	
	printf("Left Rate: %f, Right Rate: %f \r\n Left Stick: %f, Right Stick: %f \r\n",
			leftEncoderRate, rightEncoderRate, leftPower, rightPower);
	
//	If the encoders are not moving and power is applied to the joystick then apply a flat voltage
//		with the stick value to break stickion.
	if((leftEncoderRate < 1 || rightEncoderRate < 1) && (leftPower > 0.1 || rightPower > 0.1))
	{
//		0.25 is still subject to change
		Robot::driveTrain->leftMotor->Set(leftPower + (Robot::SignOf(leftPower) * 0.25));
		Robot::driveTrain->rightMotor->Set(rightPower + (Robot::SignOf(rightPower) * 0.25));
		
	}
	else
	{
		Robot::driveTrain->leftMotor->Set(leftPower);
		Robot::driveTrain->rightMotor->Set(rightPower);
	}
}
// Make this return true when this Command no longer needs to run execute()
bool AddedPowerDrive::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void AddedPowerDrive::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AddedPowerDrive::Interrupted() {
}

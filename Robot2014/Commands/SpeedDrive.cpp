// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "SpeedDrive.h"
#include "Math.h"
SpeedDrive::SpeedDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void SpeedDrive::Initialize()
{
}
// Called repeatedly when this Command is scheduled to run
void SpeedDrive::Execute()
{
	float leftStick = Robot::oi->getLeftYAxis();
	float rightStick = -(Robot::oi->getRightYAxis());	
	float rawLeftCount = (float) Robot::driveTrain->leftEncoder->Get();
	float rawRightCount = (float) Robot::driveTrain->rightEncoder->Get();
	
	printf("Raw Left Encoder: %f, Raw Right Encoder: %f \r\n", rawLeftCount, rawRightCount);
	
	// 500 represents the counts for full speed
	float scaledLeftCount = (rawLeftCount / 16.0);
	float scaledRightCount = (rawRightCount / 16.0);
	
	// 0.0280499 is the feet per counts on Pheonix
	
	// limits the range of the error
	float leftError = leftStick - (scaledLeftCount * Robot::SignOf(leftStick));
	if(leftError > 0.5)
	{
		leftError = 0.5;
	}
	else if(leftError < -0.5)
	{
		leftError = -0.5;
	}
	
	float rightError = rightStick - (scaledRightCount * Robot::SignOf(rightStick));
	if(rightError > 0.5)
	{
		rightError = 0.5;
	}
	else if(rightError < -0.5)
	{
		rightError = -0.5;
	}
	
	Robot::driveTrain->leftMotor->Set(leftError);
	Robot::driveTrain->rightMotor->Set(rightError);
	
	printf("Left Motor Power: %f, Right Motor Power: %f \r\n", Robot::driveTrain->leftMotor->Get(),
			Robot::driveTrain->rightMotor->Get());
	if(fabs(leftStick) < 0.05 || fabs(rightStick) < 0.05)
	{
		Robot::driveTrain->leftEncoder->Reset();
		Robot::driveTrain->rightEncoder->Reset();
	}
}
// Make this return true when this Command no longer needs to run execute()
bool SpeedDrive::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void SpeedDrive::End()
{
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SpeedDrive::Interrupted()
{
	End();
}

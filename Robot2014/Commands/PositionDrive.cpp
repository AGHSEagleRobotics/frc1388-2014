// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "PositionDrive.h"
#include "Math.h"
PositionDrive::PositionDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void PositionDrive::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void PositionDrive::Execute() {
	float leftStick = Robot::oi->getLeftYAxis();
	float rightStick = Robot::oi->getRightYAxis();
	
// Setting the limit of motion to 3 feet from where it is
	float leftPositionSetpoint = leftStick;
	float rightPositionSetpoint = rightStick;
	
	printf("Right Stick: %f, Left Stick: %f \r\n", leftStick, rightStick);
	
	float leftEncoderCount = Robot::driveTrain->leftEncoder->Get();
	float rightEncoderCount = Robot::driveTrain->rightEncoder->Get();
	
	printf("Right Count: %f, Left Count: %f \r\n",
			(float) Robot::driveTrain->leftEncoder->Get(),
			(float) Robot::driveTrain->rightEncoder->Get());
	
	float leftEncoderPosition = leftEncoderCount * 0.014361566;
	float rightEncoderPosition = rightEncoderCount * 0.014361566;
	
	printf("Right Position: %f, Left Position: %f \r\n", rightEncoderPosition, leftEncoderPosition);
	
	float leftPower = (leftPositionSetpoint - Robot::SignOf(leftEncoderPosition)) * 0.33;
	float rightPower = (rightPositionSetpoint - Robot::SignOf(rightEncoderPosition)) * 0.33;
	
	printf("Right Power: %f, Left Power: %f \r\n", rightPower, leftPower);
	if(fabs(leftStick) < 0.1)
	{
	Robot::driveTrain->leftMotor->Set(0);
	}
	
	if(fabs(rightStick) < 0.1)
	{
	Robot::driveTrain->rightMotor->Set(0);
	}
	
	if(fabs(rightStick) < 0.1 && fabs(leftStick) < 0.1)
	{
	Robot::driveTrain->leftEncoder->Reset();
	Robot::driveTrain->rightEncoder->Reset();
	}
	
}
// Make this return true when this Command no longer needs to run execute()
bool PositionDrive::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void PositionDrive::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PositionDrive::Interrupted() {
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.



#include "AutonomousGroup.h"
#include "GoToShoot.h"
#include "CockShooter.h"
#include "ShootAndCock.h"
#include "Shoot.h"
#include "AutonDrive.h"
#include "AutoTusks.h"
#include "GoToUp.h"
AutonomousGroup::AutonomousGroup() {
	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.
	
	//Starts the shoooter cocking and the wait makes sure the shooter is cocked: start at time 0 and ends at 3 seconds 
	AddParallel(new CockShooter());
	AddSequential(new WaitCommand(3));
	//Clamps tusks, moves claw to shoot and drives the robot all at the same time: start3seconds finish drive at 6seconds
	AddSequential(new AutoTusks());
	AddSequential(new GoToShoot());
	AddSequential(new AutonDrive(8, 0.6));
	//Shoots and waits so the shooter is done shooting so when we GoToUp we are still accurate: starts at 6 seconds and keeps running
	AddParallel(new ShootAndCock());
	AddSequential(new WaitCommand(2));
	//Takes the shooter to the up position to start the round starts and get closer to calibration in the chance calibration isn't finished: at 8 seconds and ends at 9 seconds
	AddSequential(new GoToUp());
	
	//parameter is feet to drive forward. 11.5 is our current estimate for optimal range
//	AddSequential(new AutonDrive(8, 0.6));
	

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
}

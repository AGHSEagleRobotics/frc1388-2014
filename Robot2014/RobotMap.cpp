// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Encoder* RobotMap::clawQuadClawEncoder = NULL;
SpeedController* RobotMap::clawArmMotor = NULL;
DigitalInput* RobotMap::clawFrontLimitSwitch = NULL;
DigitalInput* RobotMap::clawBackLimitSwitch = NULL;
DigitalInput* RobotMap::clawZeroSwitch = NULL;
SpeedController* RobotMap::driveTrainRightMotor = NULL;
Encoder* RobotMap::driveTrainRightEncoder = NULL;
PIDController* RobotMap::driveTrainRightPID = NULL;
SpeedController* RobotMap::driveTrainLeftMotor = NULL;
Encoder* RobotMap::driveTrainLeftEncoder = NULL;
PIDController* RobotMap::driveTrainLeftPID = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	clawQuadClawEncoder = new Encoder(1, 7, 1, 8, false, Encoder::k1X);
	lw->AddSensor("Claw", "QuadClawEncoder", clawQuadClawEncoder);
	clawQuadClawEncoder->SetDistancePerPulse(1.0);
        clawQuadClawEncoder->SetPIDSourceParameter(Encoder::kDistance);
        clawQuadClawEncoder->Start();
	clawArmMotor = new Talon(1, 8);
	lw->AddActuator("Claw", "ArmMotor", (Talon*) clawArmMotor);
	
	clawFrontLimitSwitch = new DigitalInput(1, 9);
	lw->AddSensor("Claw", "FrontLimitSwitch", clawFrontLimitSwitch);
	
	clawBackLimitSwitch = new DigitalInput(1, 10);
	lw->AddSensor("Claw", "BackLimitSwitch", clawBackLimitSwitch);
	
	clawZeroSwitch = new DigitalInput(1, 5);
	lw->AddSensor("Claw", "ZeroSwitch", clawZeroSwitch);
	
	driveTrainRightMotor = new Victor(1, 3);
	lw->AddActuator("DriveTrain", "RightMotor", (Victor*) driveTrainRightMotor);
	
	driveTrainRightEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
	driveTrainRightEncoder->SetDistancePerPulse(0.014361566);
        driveTrainRightEncoder->SetPIDSourceParameter(Encoder::kRate);
        driveTrainRightEncoder->Start();
	driveTrainRightPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRightEncoder, driveTrainRightMotor, 0.02);
	lw->AddActuator("DriveTrain", "RightPID", driveTrainRightPID);
	driveTrainRightPID->SetContinuous(false); driveTrainRightPID->SetAbsoluteTolerance(0.2); 
        driveTrainRightPID->SetOutputRange(-1.0, 1.0);
	driveTrainLeftMotor = new Victor(1, 1);
	lw->AddActuator("DriveTrain", "LeftMotor", (Victor*) driveTrainLeftMotor);
	
	driveTrainLeftEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
	driveTrainLeftEncoder->SetDistancePerPulse(0.014361566);
        driveTrainLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
        driveTrainLeftEncoder->Start();
	driveTrainLeftPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainLeftEncoder, driveTrainLeftMotor, 0.02);
	lw->AddActuator("DriveTrain", "LeftPID", driveTrainLeftPID);
	driveTrainLeftPID->SetContinuous(false); driveTrainLeftPID->SetAbsoluteTolerance(0.2); 
        driveTrainLeftPID->SetOutputRange(-1.0, 1.0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
